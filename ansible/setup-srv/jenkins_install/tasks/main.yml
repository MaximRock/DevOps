---
# tasks file for jenkins_docker
- name: Install aptitude
  ansible.builtin.apt:
    name: aptitude
    state: latest
    update_cache: true

- name: Set timezone to Europe/Moscow
  community.general.timezone:
    name: Europe/Moscow

- name: install Chrony
  ansible.builtin.apt:
    name: chrony 
    state: latest
    update_cache: true
  notify: Enable Chrony  

- name: Allow connections on multiple ports
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "8080"
    jump: ACCEPT

- name: Install JRE and JDK
  apt: 
    name: "{{ item }}"
    update_cache: yes
    install_recommends: no
  loop:
    - "openjdk-11-jre"
    - "openjdk-11-jdk"

- name: One way to avoid apt_key once it is removed from your distro
  block:
    - name: Apt key
      ansible.builtin.get_url:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
        dest: /usr/share/keyrings/jenkins-keyring.asc

    - name: Apt source
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/"
        state: present

- name: Install Jenkins
  ansible.builtin.apt:
    name: jenkins
    update_cache: true

- name: jenkins password
  ansible.builtin.shell: cat /var/lib/jenkins/secrets/initialAdminPassword
  register: __unlock_jenkins

- name: Print unlock jenkins
  ansible.builtin.debug:
    msg: "{{ __unlock_jenkins.stdout_lines }}"

- name: Add groupdocker user jenkins
  ansible.builtin.shell: usermod -aG docker jenkins

- name: Install collection community.network
  community.general.ansible_galaxy_install:
    type: collection
    name: community.general      

- name: Enable Jenkins
  ansible.builtin.service:
    name: jenkins
    state: restarted
    enabled: yes











# - name: read admin pwd
#   shell: cat /var/lib/jenkins/secrets/initialAdminPassword
#   register: adminpwd

# - name: unlock and add admin user
#   jenkins_script:
#     script: |
#       import jenkins.model.*
#       import hudson.security.*
#       def instance = Jenkins.getInstance()
#       def hudsonRealm = new HudsonPrivateSecurityRealm(false)
#       hudsonRealm.createAccount('jenkins', '${user_pwd}')
#       instance.setSecurityRealm(hudsonRealm)
#       def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
#       strategy.setAllowAnonymousRead(false)
#       instance.setAuthorizationStrategy(strategy)
#       instance.save()
#     args:
#       user_pwd: "123456"
#     user: admin
#     password: "{{ adminpwd.stdout }}"

# - name: complete setup wizard
#   jenkins_script:
#     script: |
#       import static jenkins.model.Jenkins.instance as jenkins
#       import jenkins.install.InstallState
#       if (!jenkins.installState.isSetupComplete()) {
#         InstallState.INITIAL_SETUP_COMPLETED.initializeState()
#       }
#     user: admin
#     password: "{{ adminpwd.stdout }}"

# - name: complete setup wizard
#   jenkins_script:
#     script: |
#       import jenkins.model.*
#       import hudson.security.*

#       def instance = Jenkins.getInstance()

#       def hudsonRealm = new HudsonPrivateSecurityRealm(false)
#       hudsonRealm.createAccount("MyUSERNAME","MyPASSWORD")
#       instance.setSecurityRealm(hudsonRealm)

#       def strategy = new GlobalMatrixAuthorizationStrategy()
#       strategy.add(Jenkins.ADMINISTER, "myUSERNAME")
#       instance.setAuthorizationStrategy(strategy)
#       instance.save()